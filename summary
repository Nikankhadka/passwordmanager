this is post view of the application and things i used and learned while making this application


front end portion things i did and learned while making the application 

since i made the application on react i wanted to follow dry principle so madea single form component which can be used for adding and editiog account both. for that since we can pass state  
value and functin through props while calling the component i used it to pass state along with  value and callback function which is then passed into onlclick event funciton 
and handle submits callback to get form data in the main component and use that to send api request.

the other thing i learned was we cannot pass async callback function in useeffect hook react, gives destroy fcuntion error we can nest fcuntion like callback and asunc then call async functioin into callback 
or just write the reusable fcntion outisde and call that into useeffects callback fcuntion.

and async fcuntion on api base only returns promise so if u want to use response of api called inside an async function pass a callback function to use that response.


//for authentication and client side routing created a main content  compoennt along with defalut compoentn which by default is blank and with use ffect a api request is passed
and inside that async funciton passed a callback whiich according to response change the state and consitionally render the main component else will render the other page/ component 


//the other thing i did when user loggs in the accounts data is fetched from data base and mapped to create ui, but along with that edit and delete button also comes.
so if u set onlcik then during that time the current iteration of accounts that is cliked will be accesible to use for that event,
but for dit we need to load form compoennt below the mapped account so for that i conditionally called the form compoennt just below the div the component will only render
when a state for account matches the account of current iteration of data.
accounts==item.account&&form compoent wo when accounts which is state gets updated on clicking edit then dudirng re render the map fcuntions return ui while also checking
for the form compoennt condiiton to macth, so when states value mathes the current iteration of account the form component is rendered, i also ccreated a callback function to handle
the form action which is passed through props to handlesubmit to get formdata

//that is all for front end portion.



//////////////////////////////////Backend////////////////////////////////////////////
first setup basic express apllicaiton with middle ware function now onto the security and authentication portion of the applicaition.

i used passport js middle ware library for authentication and authorization, since it is session based and also uses cookie to store the session id i needed to learn about that 

but first we need to make our server is secure and only recieve request from secure cleint so setup cors middle ware in exporess and also specify the cleint url and also give credential access
so that we can access the headers property.

since in this authentication process used in the application usess session install express sesiion module and also regsiyter that to express applcaition(using app.use())
and also pass int the necessary properyt and also modify the cookie property which is basically used to store session id in cleint side on api request using the same 
session id we can access the session in server.
for store property use connect mongo modle and mongostore to be able to store session data in the server incase the server crashes the usersession data wont be loss, only 
when use logs out or the session cookie expires then data will be lost.


//import passport and also regisyer the initialize and passport.session into the application .

using router seperate the routes for more cleaner code implementration 

//before going into passport we used encryptiona and hashing in the projct to make the information is secure and even if leaked it wil  be hard to decode .
for that bcryot library was used to hash the main users passswrod since the hashsed passeord cannot be unhashed we use compare funciton to compare the inputed paswword with th
 hashed passeord store in data base to veriy the user .which in this case represesnts the single document in collection.
and aes encryption was used to encode and decde the user password details for specific accounts.

and since the aes encryption is used as modules is already isntalled it isnot neccessarut to make the code async only delays the exection such while chneging the 
docuemnt fethced await messed up the decoding process since the decoding didnot take much time so the passwowrd was not modified better to use direct flow in this case.


//in this project i used mongodb databse since i just learned this database was not familiar with the query methods it was hard to struture the data. int he utils/configs 
i creare modeules for the fcuntions used through out the applicaiton as discussed above.
so connect function is used establish database connection in mongodb.


//now moving onto the passport js since i have already completed simple authentication application and also familar with dos donts and also new things . i will include few pointers

setup the applcaition on google console and meta for develoeprs be sure to pass in credential such as callback route apllpcaition route into google console, facebook deosnot need taht 

for local strategy it is simple send post request with username and passeord in body  and also pass credentioal 
without credential passport wont be able to attach the session cookie onto the browser
which the middleware funciuton passport.authenticate()will work on be sure to requre the strategy modules into 
auth route then according the strategy setup done funcitons will be called once everything is verified and passed to serialize user samting done then user will  be atteached to req.session.passport.user


the deserialize user funciton will only be called if there is session cookie in client else it will be not be called deserilaize user function will attched userid to req.user==

similarly for other startegy make put link let browser send get request because the middle ware functin will redirect to main accont selecton console in the  middle ware define trhe scope of data that 
is going to be fetched then once the account has been athurized then the details is passed into callback function where the middle ware will fetech the data and work according 
to strategy setup then serialize the user same process once this is complete then lieke local user can get acccess to request handler else u can define the succes redirect and failure redirect in the middlw itseld


alwys know that cors error might occure if u send api request for google and facebook startegy since they wait for response but redirection completedly chabnges the source so.


for logout function req.session.destroy or req.loogut funciton can be called and also clear cookie in res.clearcookie fucntion


//similaruly make not of 
mongoose 
schema defines the strcuture of the document that is goingto hbe stored inside the collection, model defined with the schema reepsetns the instacne of the coillectio which can be ised 
to query documents within the collectiont that the model represents , 
i have is authenticate middle ware function to protect all the crud routes so they are safe


//new thng i have learned 

since router helps to make brenches for exporess applcaiton roruter can also define multiple routes with own prefix and crud reques
router.route(:/").get().post() like wise

//the model instance or any funciton propety that is exported if want to be used inside its own mnodule then this key word will represnt the module instance to access the proeptry
within that module.


//try to use return key even for sending reponse to stop unnecessary code execution.
//the document fetched from collection can be modiefied before sending data back to the controller , i was not able to do that beacause of module and also async fcunont blockinght code execution during the looping process

//always save the main applicaiton credential in an env file and dont commit that to github

//for each startegy we need to install module and use strategy instacne passport.use(new startegy()) or directuly pass the argument into custromer which is the credential 
and also callback fucntion which basically defines the code execution for complete strategy




